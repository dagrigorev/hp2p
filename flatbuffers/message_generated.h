// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGE_P2P_H_
#define FLATBUFFERS_GENERATED_MESSAGE_P2P_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace hp2p {

struct Message;
struct MessageBuilder;

enum MessageType : int8_t {
  MessageType_HELLO = 0,
  MessageType_PING = 1,
  MessageType_CHAT = 2,
  MessageType_METRIC_WARNING = 3,
  MessageType_MIN = MessageType_HELLO,
  MessageType_MAX = MessageType_METRIC_WARNING
};

inline const MessageType (&EnumValuesMessageType())[4] {
  static const MessageType values[] = {
    MessageType_HELLO,
    MessageType_PING,
    MessageType_CHAT,
    MessageType_METRIC_WARNING
  };
  return values;
}

inline const char * const *EnumNamesMessageType() {
  static const char * const names[5] = {
    "HELLO",
    "PING",
    "CHAT",
    "METRIC_WARNING",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageType(MessageType e) {
  if (::flatbuffers::IsOutRange(e, MessageType_HELLO, MessageType_METRIC_WARNING)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageType()[index];
}

struct Message FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SENDER_ID = 4,
    VT_TYPE = 6,
    VT_PAYLOAD = 8
  };
  const ::flatbuffers::String *sender_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SENDER_ID);
  }
  hp2p::MessageType type() const {
    return static_cast<hp2p::MessageType>(GetField<int8_t>(VT_TYPE, 0));
  }
  const ::flatbuffers::String *payload() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PAYLOAD);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SENDER_ID) &&
           verifier.VerifyString(sender_id()) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           verifier.VerifyString(payload()) &&
           verifier.EndTable();
  }
};

struct MessageBuilder {
  typedef Message Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_sender_id(::flatbuffers::Offset<::flatbuffers::String> sender_id) {
    fbb_.AddOffset(Message::VT_SENDER_ID, sender_id);
  }
  void add_type(hp2p::MessageType type) {
    fbb_.AddElement<int8_t>(Message::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_payload(::flatbuffers::Offset<::flatbuffers::String> payload) {
    fbb_.AddOffset(Message::VT_PAYLOAD, payload);
  }
  explicit MessageBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Message> CreateMessage(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> sender_id = 0,
    hp2p::MessageType type = hp2p::MessageType_HELLO,
    ::flatbuffers::Offset<::flatbuffers::String> payload = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_sender_id(sender_id);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Message> CreateMessageDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *sender_id = nullptr,
    hp2p::MessageType type = hp2p::MessageType_HELLO,
    const char *payload = nullptr) {
  auto sender_id__ = sender_id ? _fbb.CreateString(sender_id) : 0;
  auto payload__ = payload ? _fbb.CreateString(payload) : 0;
  return hp2p::CreateMessage(
      _fbb,
      sender_id__,
      type,
      payload__);
}

inline const hp2p::Message *GetMessage(const void *buf) {
  return ::flatbuffers::GetRoot<hp2p::Message>(buf);
}

inline const hp2p::Message *GetSizePrefixedMessage(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<hp2p::Message>(buf);
}

inline bool VerifyMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<hp2p::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<hp2p::Message>(nullptr);
}

inline void FinishMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<hp2p::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<hp2p::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace p2p

#endif  // FLATBUFFERS_GENERATED_MESSAGE_P2P_H_
